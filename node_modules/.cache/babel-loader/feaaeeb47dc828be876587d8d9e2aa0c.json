{"ast":null,"code":"import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE, COMMENT, FETCH_BY_CREATOR } from \"../constants/actionTypes\";\nimport * as api from \"../api/index.js\";\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: {\n        post: data\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsByCreator = name => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsByCreator(name);\n    dispatch({\n      type: FETCH_BY_CREATOR,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/spartan/Documents/GitHub/cmpe272FinalProject/projfrontend/src/actions/posts.js"],"names":["START_LOADING","END_LOADING","FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","COMMENT","FETCH_BY_CREATOR","api","getPost","id","dispatch","type","data","fetchPost","payload","post","error","console","log","getPosts","page","currentPage","numberOfPages","fetchPosts","getPostsByCreator","name","fetchPostsByCreator","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","history","push","_id","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","commentPost","value","comment","comments","deletePost"],"mappings":"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","sourcesContent":["import {\n\tSTART_LOADING,\n\tEND_LOADING,\n\tFETCH_ALL,\n\tFETCH_POST,\n\tFETCH_BY_SEARCH,\n\tCREATE,\n\tUPDATE,\n\tDELETE,\n\tLIKE,\n\tCOMMENT,\n\tFETCH_BY_CREATOR,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api/index.js\";\n\nexport const getPost = (id) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: START_LOADING });\n\n\t\tconst { data } = await api.fetchPost(id);\n\n\t\tdispatch({ type: FETCH_POST, payload: { post: data } });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const getPosts = (page) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: START_LOADING });\n\t\tconst {\n\t\t\tdata: { data, currentPage, numberOfPages },\n\t\t} = await api.fetchPosts(page);\n\n\t\tdispatch({\n\t\t\ttype: FETCH_ALL,\n\t\t\tpayload: { data, currentPage, numberOfPages },\n\t\t});\n\t\tdispatch({ type: END_LOADING });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const getPostsByCreator = (name) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: START_LOADING });\n\t\tconst {\n\t\t\tdata: { data },\n\t\t} = await api.fetchPostsByCreator(name);\n\n\t\tdispatch({ type: FETCH_BY_CREATOR, payload: { data } });\n\t\tdispatch({ type: END_LOADING });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: START_LOADING });\n\t\tconst {\n\t\t\tdata: { data },\n\t\t} = await api.fetchPostsBySearch(searchQuery);\n\n\t\tdispatch({ type: FETCH_BY_SEARCH, payload: { data } });\n\t\tdispatch({ type: END_LOADING });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const createPost = (post, history) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: START_LOADING });\n\t\tconst { data } = await api.createPost(post);\n\n\t\tdispatch({ type: CREATE, payload: data });\n\n\t\thistory.push(`/posts/${data._id}`);\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n\ttry {\n\t\tconst { data } = await api.updatePost(id, post);\n\n\t\tdispatch({ type: UPDATE, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const likePost = (id) => async (dispatch) => {\n\tconst user = JSON.parse(localStorage.getItem(\"profile\"));\n\n\ttry {\n\t\tconst { data } = await api.likePost(id, user?.token);\n\n\t\tdispatch({ type: LIKE, payload: data });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const commentPost = (value, id) => async (dispatch) => {\n\ttry {\n\t\tconst { data } = await api.comment(value, id);\n\n\t\tdispatch({ type: COMMENT, payload: data });\n\n\t\treturn data.comments;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n\ttry {\n\t\tawait await api.deletePost(id);\n\n\t\tdispatch({ type: DELETE, payload: id });\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}